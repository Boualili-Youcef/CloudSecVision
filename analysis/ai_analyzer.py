import json
import requests
import traceback
from datetime import datetime

def generate_iam_report(iam_results):
    """Generate a comprehensive IAM security report using Ollama AI"""
    
    print("ü§ñ Generating IAM security report with AI...")
    
    if not iam_results or len(iam_results) == 0:
        return {
            "summary": "‚úÖ No IAM security issues detected. Your IAM policies appear to follow the principle of least privilege.",
            "risk_assessment": "LOW",
            "detailed_analysis": "All scanned IAM policies are properly configured without overly permissive access patterns.",
            "recommendations": [
                "Continue regular IAM policy reviews",
                "Consider implementing IAM Access Analyzer for ongoing monitoring",
                "Maintain documentation of IAM policy purposes"
            ],
            "priority_actions": [],
            "compliance_status": "COMPLIANT"
        }

    prompt = f"""
Analyze these AWS IAM security issues and provide a detailed security report in English.

IAM Issues Detected: {json.dumps(iam_results, indent=2)}

Respond with a STRUCTURED report that follows exactly this format:

## EXECUTIVE SUMMARY
[A concise paragraph summarizing the current IAM security posture]

## RISK LEVEL: [CRITICAL/HIGH/MEDIUM/LOW]

## DETAILED ANALYSIS
[2-3 paragraphs explaining the technical issues in detail, their potential impact, and why they are problematic]

## RECOMMENDATIONS
1. [Specific recommendation 1]
2. [Specific recommendation 2]
3. [Specific recommendation 3]

## PRIORITY ACTIONS
1. [Immediate action 1 with recommended timeframe]
2. [Immediate action 2 with recommended timeframe]

## COMPLIANCE STATUS: [NON-COMPLIANT/PARTIALLY COMPLIANT/COMPLIANT]

Important points to cover:
- Explain the concrete impact of overly permissive policies
- Describe specific attack vectors and risk scenarios
- Indicate compliance implications (GDPR, SOC2, etc.)
- Propose precise correction steps with code examples if relevant

IMPORTANT: Present the report as structured and readable text, NOT in JSON format.
    """

    try:
        print("üì° Sending IAM analysis request to Ollama...")
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                'model': 'llama3.2:3b',
                'prompt': prompt,
                'stream': False
            },
            timeout=10000
        )

        if response.status_code == 200:
            result = response.json()
            ai_text = result.get('response', '')

            print(f"ü§ñ AI Response received for IAM analysis")

            if ai_text.strip():
                # Convertir la r√©ponse textuelle en dictionnaire structur√©
                analysis = {
                    "report": ai_text,  # Conserver le rapport complet
                    "summary": "IAM Security Analysis Report generated by AI",
                    "risk_assessment": "MEDIUM",  # Valeur par d√©faut
                    "detailed_analysis": ai_text,
                    "recommendations": [],
                    "priority_actions": [],
                    "compliance_status": "PARTIALLY_COMPLIANT"  # Valeur par d√©faut
                }
                
                # Extraire le niveau de risque
                if "RISK LEVEL: CRITICAL" in ai_text:
                    analysis["risk_assessment"] = "CRITICAL"
                elif "RISK LEVEL: HIGH" in ai_text:
                    analysis["risk_assessment"] = "HIGH"
                elif "RISK LEVEL: LOW" in ai_text:
                    analysis["risk_assessment"] = "LOW"
                elif "RISK LEVEL: MEDIUM" in ai_text:
                    analysis["risk_assessment"] = "MEDIUM"
                    
                # Extraire le statut de conformit√©
                if "COMPLIANCE STATUS: NON-COMPLIANT" in ai_text:
                    analysis["compliance_status"] = "NON_COMPLIANT"
                elif "COMPLIANCE STATUS: COMPLIANT" in ai_text:
                    analysis["compliance_status"] = "COMPLIANT"
                elif "COMPLIANCE STATUS: PARTIALLY COMPLIANT" in ai_text:
                    analysis["compliance_status"] = "PARTIALLY_COMPLIANT"
                
                # Extraire les recommandations (lignes qui commencent par des num√©ros apr√®s "## RECOMMENDATIONS")
                try:
                    rec_start = ai_text.find("## RECOMMENDATIONS")
                    if rec_start != -1:
                        rec_section = ai_text[rec_start:ai_text.find("## PRIORITY ACTIONS", rec_start)]
                        rec_lines = [line.strip() for line in rec_section.split('\n') if line.strip() and line.strip().startswith(('1.', '2.', '3.', '4.', '5.'))]
                        analysis["recommendations"] = [line[2:].strip() for line in rec_lines]  # Enlever le num√©ro
                except:
                    pass
                
                # Extraire les actions prioritaires
                try:
                    action_start = ai_text.find("## PRIORITY ACTIONS")
                    if action_start != -1:
                        action_section = ai_text[action_start:ai_text.find("## COMPLIANCE STATUS", action_start)]
                        action_lines = [line.strip() for line in action_section.split('\n') if line.strip() and line.strip().startswith(('1.', '2.', '3.', '4.', '5.'))]
                        analysis["priority_actions"] = [line[2:].strip() for line in action_lines]  # Enlever le num√©ro
                except:
                    pass
                    
                return analysis
            else:
                print("‚ö†Ô∏è No response text found in AI response")
        else:
            print(f"‚ùå HTTP Error {response.status_code}")

    except requests.exceptions.ConnectionError:
        print("‚ùå Connection error: Make sure Ollama is running")
    except Exception as e:
        print(f"‚ö†Ô∏è IAM AI analysis failed: {e}")

    # Fallback analysis
    return {
        "summary": f"‚ö†Ô∏è {len(iam_results)} IAM security issues detected requiring attention.",
        "risk_assessment": "HIGH" if len(iam_results) > 5 else "MEDIUM",
        "detailed_analysis": "Multiple IAM policies contain overly permissive configurations that violate the principle of least privilege.",
        "recommendations": [
            "Review and restrict overly permissive IAM policies",
            "Implement specific resource-based permissions",
            "Remove wildcard (*) permissions where possible",
            "Conduct regular IAM policy audits"
        ],
        "priority_actions": [
            "Immediately review policies with wildcard permissions",
            "Document business justification for broad permissions",
            "Implement least privilege access controls"
        ],
        "compliance_status": "NON_COMPLIANT"
    }

def analyze_security_issues(scan_results):
    """Analyse the security issues found with Ollama AI.

    Accepts either:
    - A dict mapping service names to lists of issue objects, e.g. {"s3": [{...}, ...]}
    - A raw list of issue objects (e.g., the S3 report array). In this case, it will be
      normalized to {"s3": <list>}.
    """

    print("ü§ñ Starting AI analysis...")

    # Normalize input: allow a raw list of findings (e.g., S3-only JSON array)
    if isinstance(scan_results, list):
        scan_results = {"s3": scan_results}
    elif not isinstance(scan_results, dict):
        # Unknown format; coerce to an empty dict to avoid crashes
        print("‚ö†Ô∏è Unsupported scan_results type, expected dict or list. Proceeding with empty data.")
        scan_results = {}

    total_issues = 0
    for service_issues in scan_results.values():
        if isinstance(service_issues, list):
            total_issues += len(service_issues)

    if total_issues == 0:
        return {
            "message": "‚úÖ No security issues found!",
            "risk_score": 0,
            "recommendations": ["Continue monitoring your AWS infrastructure"]
        }

    prompt = f"""
        Analyze these AWS security vulnerabilities and provide recommendations.

        Data: {json.dumps(scan_results, indent=2)}

        Please respond with a JSON object containing EXACTLY these fields:
        {{
            "severity": "CRITICAL" or "HIGH" or "MEDIUM" or "LOW",
            "risk_score": a number from 0 to 100,
            "top_priorities": ["action1", "action2", "action3"],
            "recommendations": ["rec1", "rec2", "rec3"]
        }}

        Only return the JSON object, nothing else.
        """

    try:
        print("üì° Sending request to Ollama...")
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                'model': 'llama3.2:3b',
                'prompt': prompt,
                'stream': False
            },
            timeout=10000
        )

        print(f"üìä Response status: {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            ai_text = result.get('response', '')

            print(f"ü§ñ AI Response received (length: {len(ai_text)})")
            print(f"üìù First 200 chars: {ai_text[:200]}...")

            if not ai_text.strip():
                print("‚ùå Empty response from Ollama")
                return get_fallback_analysis(total_issues)

            try:
                # Try to extract JSON from the response
                start_idx = ai_text.find('{')
                end_idx = ai_text.rfind('}') + 1
                if start_idx != -1 and end_idx != -1:
                    json_str = ai_text[start_idx:end_idx]
                    print(f"üîç Extracted JSON: {json_str[:200]}...")
                    ai_analysis = json.loads(json_str)

                    # Validate the required fields and provide defaults if missing
                    validated_analysis = {
                        "severity": ai_analysis.get('severity', 'HIGH'),
                        "risk_score": ai_analysis.get('risk_score', min(total_issues * 20, 100)),
                        "total_issues": total_issues,
                        "top_priorities": ai_analysis.get('top_priorities', [
                            "Review and restrict public access",
                            "Implement principle of least privilege",
                            "Enable security monitoring"
                        ]),
                        "recommendations": ai_analysis.get('recommendations', [
                            "Configure restrictive security groups",
                            "Review IAM policies for over-permissions",
                            "Enable AWS CloudTrail for auditing"
                        ])
                    }

                    print("‚úÖ Successfully parsed and validated AI response")
                    return validated_analysis
                else:
                    print("‚ö†Ô∏è No JSON found in AI response")
                    print(f"Full response: {ai_text}")
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è Failed to parse JSON: {e}")
                print(f"Attempted to parse: {json_str if 'json_str' in locals() else 'N/A'}")
        else:
            print(f"‚ùå HTTP Error {response.status_code}")
            print(f"Response text: {response.text}")

    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå Connection error: {e}")
        print("üí° Make sure Ollama is running with: ollama serve")
    except requests.exceptions.Timeout as e:
        print(f"‚ùå Request timeout: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è AI analysis failed: {e}")
        import traceback
        print("üîç Full traceback:")
        traceback.print_exc()
    print("üîÑ Using fallback analysis...")
    return get_fallback_analysis(total_issues)

def get_fallback_analysis(total_issues):
    """Generate fallback analysis when AI is not available"""
    return {
        "severity": "HIGH" if total_issues > 3 else "MEDIUM",
        "risk_score": min(total_issues * 20, 100),
        "total_issues": total_issues,
        "top_priorities": [
            "Review and restrict public access",
            "Implement principle of least privilege",
            "Enable security monitoring"
        ],
        "recommendations": [
            "Configure restrictive security groups",
            "Review IAM policies for over-permissions",
            "Enable AWS CloudTrail for auditing",
            "Set up automated security scanning"
        ]
    }

def display_iam_report(analysis):
    """Display the IAM analysis report in a user-friendly format"""
    
    print("\n" + "="*60)
    print("ü§ñ IAM SECURITY ANALYSIS REPORT")
    print("="*60)
    
    if analysis is None:
        print("‚ùå No analysis data available")
        return
    
    # Afficher le rapport complet si disponible
    if "report" in analysis and analysis["report"]:
        print(analysis["report"])
    else:
        # Format de fallback
        print(f"üìä Summary: {analysis.get('summary', 'Not available')}")
        print(f"‚ö†Ô∏è  Risk Level: {analysis.get('risk_assessment', 'UNKNOWN')}")
        print(f"üìú Compliance Status: {analysis.get('compliance_status', 'UNKNOWN')}")
        
        recommendations = analysis.get('recommendations', [])
        if recommendations:
            print(f"\nüí° RECOMMENDATIONS:")
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec}")
        
        priority_actions = analysis.get('priority_actions', [])
        if priority_actions:
            print(f"\nüö® PRIORITY ACTIONS:")
            for i, action in enumerate(priority_actions, 1):
                print(f"   {i}. {action}")
    
    print("="*60)

def display_ai_analysis(analysis):
    """Display the AI analysis results in a user-friendly format"""
    
    print("\n" + "="*50)
    print("ü§ñ AI SECURITY ANALYSIS")
    print("="*50)
    
    if analysis is None:
        print("‚ùå No analysis data available")
        return
    
    print(f"üìä Total Issues Found: {analysis.get('total_issues', 0)}")
    print(f"‚ö†Ô∏è  Severity Level: {analysis.get('severity', 'UNKNOWN')}")
    print(f"üéØ Risk Score: {analysis.get('risk_score', 0)}/100")
    
    priorities = analysis.get('top_priorities', [])
    if priorities:
        print(f"\nüö® TOP PRIORITIES:")
        for priority in priorities:
            print(f"   ‚Ä¢ {priority}")
    else:
        print(f"\nüö® TOP PRIORITIES: None available")
    
    recommendations = analysis.get('recommendations', [])
    if recommendations:
        print(f"\nüí° RECOMMENDATIONS:")
        for rec in recommendations:
            print(f"   ‚Ä¢ {rec}")
    else:
        print(f"\nüí° RECOMMENDATIONS: None available")
    
    print("="*50)